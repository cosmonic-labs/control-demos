---
name: Package and publish HTTP sample Helm chart

on:
  workflow_run:
    workflows: ["Build and publish HTTP sample components"]
    types: 
      - completed

env:
  REGISTRY: ghcr.io

jobs:
  publish-chart:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get release info
        id: release
        run: |
          # Get the latest release that triggered the component build
          RELEASE_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name')
          VERSION=${RELEASE_TAG#v}
          echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Processing release: $RELEASE_TAG (version: $VERSION)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate release version
        run: |
          if [[ ! "${{ steps.release.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
            echo "❌ Invalid version format: ${{ steps.release.outputs.version }}"
            exit 1
          fi
          echo "✅ Valid version format: ${{ steps.release.outputs.version }}"

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repository owner
        run: |
          echo "REPO_OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Verify component images exist
        run: |
          echo "🔍 Verifying published component images..."
          
          COMPONENTS=("http-server" "hono-swagger-ui" "welcome-tour")
          for component in "${COMPONENTS[@]}"; do
            IMAGE="${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/components/$component:${{ steps.release.outputs.version }}"
            echo "Checking: $IMAGE"
    
            if docker manifest inspect -v $IMAGE 2>/dev/null; then
              echo "✅ $component: Image exists"
            else
              echo "❌ $component: Image not found or not accessible"
              echo "This may indicate the component build failed or hasn't completed yet"
              exit 1
            fi
          done

      - name: Update chart metadata
        run: |
          for component in "${COMPONENTS[@]}"; do
            # Backup original Chart.yaml
            cp $component/chart/$component/Chart.yaml $component/chart/$component/Chart.yaml.bak
          
            # Update versions
            sed -i "s/version: .*/version: ${{ steps.release.outputs.version }}/" $component/chart/$component/Chart.yaml
            sed -i "s/appVersion: .*/appVersion: \"${{ steps.release.outputs.version }}\"/" $component/chart/$component/Chart.yaml
          
            echo "📝 Updated Chart.yaml:"
            diff Chart.yaml.bak Chart.yaml || true
          done

      - name: Lint Helm charts
        run: |
          for component in "${COMPONENTS[@]}"; do
            helm lint $component/chart/$component/Chart.yaml
            echo "✅ $component Helm chart validation passed"
          done

      - name: Package Helm charts
        run: |
          for component in "${COMPONENTS[@]}"; do
            helm package $component/chart/$component/ --version ${{ steps.release.outputs.version }}
            CHART_FILE="$component-${{ steps.release.outputs.version }}.tgz"
          
            if [ ! -f "$CHART_FILE" ]; then
              echo "❌ Chart package not created: $CHART_FILE"
              exit 1
            fi
          
            echo "✅ Chart packaged: $CHART_FILE"
            echo "CHART_FILE=$CHART_FILE" >> $GITHUB_ENV
          done

      - name: Push Helm charts to OCI registry
        run: |
          CHART_REF="oci://${{ env.REGISTRY }}/${{ env.REPO_OWNER_LC }}/charts"
          echo "📤 Pushing charts to: $CHART_REF"
          
          for component in "${COMPONENTS[@]}"; do
            helm push $component-${{ steps.release.outputs.version }}.tgz $CHART_REF
            echo "✅ Chart $component-${{ steps.release.outputs.version }} published successfully"
          done

      - name: Update component image tags in values files
        run: |
          echo "🔄 Updating component image tags in values files..."
          
          # Update each values file with the new image tags
          FILES=(
            "./http-server/values.yaml"
            "./hono-swagger-ui/values.yaml" 
            "./welcome-tour/values.yaml"
          )
          
          COMPONENTS=("http-server" "hono-swagger-ui" "welcome-tour")
          
          for i in "${!FILES[@]}"; do
            file="${FILES[i]}"
            component="${COMPONENTS[i]}"
            
            if [ -f "$file" ]; then
              echo "Updating $file..."
              # Use more specific regex to avoid false matches
              sed -i "s|image: ghcr\.io/.*/components/$component:.*|image: ghcr.io/${{ env.REPO_OWNER_LC }}/components/$component:${{ steps.release.outputs.version }}|" "$file"
              echo "✅ Updated $component image tag"
            else
              echo "⚠️ File not found: $file"
            fi
          done

      - name: Validate updated values files
        run: |
          echo "🔍 Validating updated values files..."
          
          for component in "http-server" "hono-swagger-ui" "welcome-tour"; do
            file="./${component}/values.yaml"
            if [ -f "$file" ]; then
              if grep -q "ghcr.io/${{ env.REPO_OWNER_LC }}/components/$component:${{ steps.release.outputs.version }}" "$file"; then
                echo "✅ $component: Image tag updated correctly"
              else
                echo "❌ $component: Image tag not updated properly"
                echo "Expected: ghcr.io/${{ env.REPO_OWNER_LC }}/components/$component:${{ steps.release.outputs.version }}"
                echo "Found in $file:"
                grep "image:" "$file" || echo "No image field found"
                exit 1
              fi
            fi
          done

      - name: Create Pull Request for updated image tags
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            Update HTTP sample component image tags to ${{ steps.release.outputs.version }}

            Automated update following release ${{ steps.release.outputs.tag }}

            - Updated http-server image tag
            - Updated hono-swagger-ui image tag
            - Updated welcome-tour image tag
            - Updated http-sample chart version to ${{ steps.release.outputs.version }}
          title: "🚀 Update HTTP sample image tags to ${{ steps.release.outputs.version }}"
          body: |
            ## 📦 Automated Release Update

            This PR updates component image tags and chart version following the successful
            publication of release **${{ steps.release.outputs.tag }}**.

            ### Changes Made
            - 🔄 **HTTP Server**: Updated to `${{ steps.release.outputs.version }}`
            - 🔄 **Hono Swagger UI**: Updated to `${{ steps.release.outputs.version }}`
            - 🔄 **Welcome Tour**: Updated to `${{ steps.release.outputs.version }}`
            - 📦 **Chart Version**: Updated to `${{ steps.release.outputs.version }}`

            ### Published Artifacts
            - 🎯 **Components**: `ghcr.io/${{ env.REPO_OWNER_LC }}/components/*:${{ steps.release.outputs.version }}`
            - ⚙️ **Chart**: `oci://ghcr.io/${{ env.REPO_OWNER_LC }}/charts/http-sample:${{ steps.release.outputs.version }}`

            ### Usage
            ```bash
            # Deploy using the new chart version
            helm install my-app oci://ghcr.io/${{ env.REPO_OWNER_LC }}/charts/http-sample \
              --version ${{ steps.release.outputs.version }} \
              -f ./http-server/values.yaml
            ```

            ---
            🤖 *This PR was automatically created by the release workflow*
          branch: release/update-image-tags-${{ steps.release.outputs.version }}
          delete-branch: true
          labels: |
            automated
            release
            dependencies

      - name: Workflow Summary
        if: always()
        run: |
          echo "## 🚀 Chart Publication Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ steps.release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Status:** Chart published successfully" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Chart:** \`oci://ghcr.io/${{ env.REPO_OWNER_LC }}/charts/http-sample:${{ steps.release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Chart publication failed" >> $GITHUB_STEP_SUMMARY
          fi