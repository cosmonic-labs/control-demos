---
name: Build and publish HTTP sample components

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  TINYGO_VERSION: "0.38.0"
  NODE_VERSION: "20"
  HELM_VERSION: "3.14.0"

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-valid: ${{ steps.version.outputs.valid }}
    steps:
      - name: Validate version format
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          if [[ $VERSION =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "✅ Valid version format: $VERSION"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi

  build-http-server:
    needs: validate-release
    if: needs.validate-release.outputs.version-valid == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: "./http-server/go.sum"

      - name: Cache TinyGo installation
        id: cache-tinygo
        uses: actions/cache@v4
        with:
          path: /usr/local/tinygo
          key: tinygo-${{ env.TINYGO_VERSION }}

      - name: Install TinyGo
        if: steps.cache-tinygo.outputs.cache-hit != 'true'
        run: |
          wget -q https://github.com/tinygo-org/tinygo/releases/download/v${{ env.TINYGO_VERSION }}/tinygo_${{ env.TINYGO_VERSION }}_amd64.deb
          sudo dpkg -i tinygo_${{ env.TINYGO_VERSION }}_amd64.deb
          echo "/usr/local/tinygo/bin" >> $GITHUB_PATH

      - name: Setup wash CLI
        uses: wasmcloud/setup-wash-action@v1.0.0-rc.3

      - name: Install wasm-tools
        working-directory: ./http-server
        run: |
          cargo install --locked wasm-tools@1.225.0

      - name: Build HTTP server component
        id: build
        uses: wasmCloud/actions/wash-build@v0.2.0
        with:
          working-directory: ./http-server

      - name: Publish Wasm component
        uses: wasmcloud/actions/wash-oci-publish@v0.2.0
        with:
          component_path: ${{ steps.build.outputs.component_path }}
          image_tags: ${{ needs.validate-release.outputs.version }}
          registry: ${{ env.REGISTRY }}

  build-hono-swagger-ui:
    needs: validate-release
    if: needs.validate-release.outputs.version-valid == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./hono-swagger-ui/package-lock.json"

      - name: Setup wash CLI
        uses: wasmcloud/setup-wash-action@v1.0.0-rc.3

      - name: Build Hono Swagger UI component
        id: build
        uses: wasmCloud/actions/wash-build@v0.2.0
        with:
          working-directory: ./hono-swagger-ui

      - name: Publish Wasm component
        uses: wasmcloud/actions/wash-oci-publish@v0.2.0
        with:
          component_path: ${{ steps.build.outputs.component_path }}
          image_tags: ${{ needs.validate-release.outputs.version }}
          registry: ${{ env.REGISTRY }}

  build-welcome-tour:
    needs: validate-release
    if: needs.validate-release.outputs.version-valid == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "./welcome-tour/package-lock.json"

      - name: Setup wash CLI
        uses: wasmcloud/setup-wash-action@v1.0.0-rc.3

      - name: Build Welcome Tour component
        id: build
        uses: wasmCloud/actions/wash-build@v0.2.0
        with:
          working-directory: ./welcome-tour

      - name: Publish Wasm component
        uses: wasmcloud/actions/wash-oci-publish@v0.2.0
        with:
          component_path: ${{ steps.build.outputs.component_path }}
          image_tags: ${{ needs.validate-release.outputs.version }}
          registry: ${{ env.REGISTRY }}

  summary:
    needs:
      [
        validate-release,
        build-http-server,
        build-hono-swagger-ui,
        build-welcome-tour,
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## 📦 Component Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
